class Solution {
public:
    string longestPalindrome(string s) {
        string st="";
        int i;
        for(i=s.size()-1;i>=0;i--)
            {
                st+=s[i];
            }
        int m=s.length();
        int n=st.length();
        return LCS(s,st,m,n);
    }
    
    string LCS(string X,string Y,int m, int n)
    {
        int t[m+1][n+1];
        int i,j;
        for(i=0;i<m+1;i++)
        {
            for(j=0;j<n+1;j++)
            {
                if(i==0 || j==0)
                    t[i][j]=0;
            }
        }
        for(i=1;i<m+1;i++)
        {
            for(j=1;j<n+1;j++)
            {
                if(X[i-1]==Y[j-1])
                    t[i][j]=1+t[i-1][j-1];
                else
                    t[i][j]=max(t[i-1][j],t[i][j-1]);
            }
        }

        int l1=m,l2=n;
        string s;
        while(l1>0 && l2>0)
        {
            if(X[l1-1]==Y[l2-1])
            {
                s.push_back(X[l1-1]);
                l1--;
                l2--;
            }
            else
            {
                if(t[l1][l2-1]>t[l1-1][l2])
                    l2--;
                else 
                    l1--;
            }
        }
        reverse(s.begin(),s.end());
        return s;
    }
};






















#include <iostream>
#include <string.h>
#include <vector>
#include <algorithm>
using namespace std;

string LCS(string X,string Y,int m, int n)
{
    int t[m+1][n+1];
    int i,j;
    for(i=0;i<m+1;i++)
    {
        for(j=0;j<n+1;j++)
        {
            if(i==0 || j==0)
                t[i][j]=0;
        }
    }
    for(i=1;i<m+1;i++)
    {
        for(j=1;j<n+1;j++)
        {
            if(X[i-1]==Y[j-1])
                t[i][j]=1+t[i-1][j-1];
            else
                t[i][j]=max(t[i-1][j],t[i][j-1]);
        }
    }
    
    int l1=m,l2=n;
    string s;
    while(l1>0 && l2>0)
    {
        if(X[l1-1]==Y[l2-1])
        {
            s.push_back(X[l1-1]);
            l1--;
            l2--;
        }
        else
        {
            if(t[l1][l2-1]>t[l1-1][l2])
                l2--;
            else 
                l1--;
        }
    }
    reverse(s.begin(),s.end());
    return s;
}

int main() {
    int i;
    string x,y;
    cin>>x;
    string s="";
    for(i=x.size()-1;i>=0;i--)
        {
            s+=x[i];
        }
    y=s;
    int m=x.length();
    int n=y.length();
    string st=LCS(x,y,m,n);
    int l=LCS(x,y,m,n).length();
     cout<<LCS(x,y,m,n);
    return 0;
}